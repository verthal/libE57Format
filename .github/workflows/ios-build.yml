name: Build iOS XCFrameworks

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake & Ninja
        run: |
          brew update
          brew install cmake ninja
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH

      - name: Get ios-cmake toolchain
        run: git clone https://github.com/leetal/ios-cmake.git "$GITHUB_WORKSPACE/ios-cmake"

      - name: Build Xerces & E57 XCFrameworks
        shell: bash
        run: |
          set -euo pipefail
          IOS_TOOLCHAIN="$GITHUB_WORKSPACE/ios-cmake/ios.toolchain.cmake"

          # --- Xerces 3.2.x holen ---
          mkdir -p _build_ios && cd _build_ios
          git clone https://github.com/apache/xerces-c.git
          cd xerces-c
          git fetch --tags --force
          # stabil: 3.2.2 Tag (so heißt er im Repo: 'xerces-3.2.2')
          git checkout xerces-3.2.2
          cd ..

          # --- Wrapper, der NUR src/ baut ---
          mkdir wrapper
          cat > wrapper/CMakeLists.txt <<'EOF'
          cmake_minimum_required(VERSION 3.20)
          project(xerces_ios LANGUAGES C CXX)
          set(CMAKE_POSITION_INDEPENDENT_CODE ON)
          set(BUILD_SHARED_LIBS OFF)
          set(CMAKE_DISABLE_FIND_PACKAGE_ICU  ON  CACHE BOOL "" FORCE)
          set(CMAKE_DISABLE_FIND_PACKAGE_CURL ON  CACHE BOOL "" FORCE)
          add_subdirectory("${CMAKE_SOURCE_DIR}/../xerces-c/src" "${CMAKE_BINARY_DIR}/xerces")
          EOF

          # --- Xerces bauen: Device + Simulator ---
          cmake -S wrapper -B build_os -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=OS64 \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build_os --parallel

          cmake -S wrapper -B build_sim -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=SIMULATOR64 \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build_sim --parallel

          # XCFramework für Xerces
          xcodebuild -create-xcframework \
            -library build_os/xerces/libxerces-c.a -headers xerces-c/src \
            -library build_sim/xerces/libxerces-c.a -headers xerces-c/src \
            -output XercesC.xcframework

          # --- libE57Format holen ---
          git clone https://github.com/asmaloney/libE57Format.git

          # libE57Format bauen (statisch) gegen die gerade gebaute Xerces-Lib
          cmake -S libE57Format -B e57_os -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=OS64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DXercesC_INCLUDE_DIRS="$PWD/xerces-c/src" \
            -DXercesC_LIBRARY="$PWD/build_os/xerces/libxerces-c.a"
          cmake --build e57_os --parallel

          cmake -S libE57Format -B e57_sim -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=SIMULATOR64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DXercesC_INCLUDE_DIRS="$PWD/xerces-c/src" \
            -DXercesC_LIBRARY="$PWD/build_sim/xerces/libxerces-c.a"
          cmake --build e57_sim --parallel

          LIB_OS=$(ls e57_os/lib*.a | head -n1)
          LIB_SIM=$(ls e57_sim/lib*.a | head -n1)

          xcodebuild -create-xcframework \
            -library "$LIB_OS"  -headers libE57Format/src \
            -library "$LIB_SIM" -headers libE57Format/src \
            -output libE57Format.xcframework

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-xcframeworks
          path: |
            _build_ios/XercesC.xcframework
            _build_ios/libE57Format.xcframework
