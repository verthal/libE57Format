name: Build iOS XCFrameworks (Xerces + libE57Format)

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake & Ninja
        run: |
          brew update
          brew install cmake ninja
          echo "$(brew --prefix)/bin" >> "$GITHUB_PATH"

      - name: Get ios-cmake toolchain
        run: git clone https://github.com/leetal/ios-cmake.git "$GITHUB_WORKSPACE/ios-cmake"

      - name: Build Xerces & libE57Format (XCFrameworks)
        shell: bash
        run: |
          set -euo pipefail
          IOS_TOOLCHAIN="$GITHUB_WORKSPACE/ios-cmake/ios.toolchain.cmake"

          # ===== Xerces-C holen (stabiler Tag) =====
          mkdir -p _build_ios && cd _build_ios
          git clone https://github.com/apache/xerces-c.git
          cd xerces-c
          git fetch --tags --force
          git checkout xerces-3.2.2
          cd ..

          # ===== Wrapper schreiben: NUR src/ bauen, Version & Build-Includes setzen =====
          mkdir wrapper
          cat > wrapper/CMakeLists.txt <<'EOF'
          cmake_minimum_required(VERSION 3.20)
          project(xerces_ios VERSION 3.2.2 LANGUAGES C CXX)

          # Version für src/CMakeLists (benötigt von write_basic_package_version_file)
          set(XERCES_VERSION       "${PROJECT_VERSION}" CACHE STRING "" FORCE)
          set(XERCES_VERSION_MAJOR 3                    CACHE STRING "" FORCE)
          set(XERCES_VERSION_MINOR 2                    CACHE STRING "" FORCE)
          set(XERCES_VERSION_PATCH 2                    CACHE STRING "" FORCE)

          set(CMAKE_POSITION_INDEPENDENT_CODE ON)
          set(BUILD_SHARED_LIBS OFF)
          set(CMAKE_SKIP_INSTALL_RULES ON CACHE BOOL "" FORCE)

          # Optionale Dependencies hart deaktivieren
          set(CMAKE_DISABLE_FIND_PACKAGE_ICU  ON CACHE BOOL "" FORCE)
          set(CMAKE_DISABLE_FIND_PACKAGE_CURL ON CACHE BOOL "" FORCE)

          # Nur die Library einbinden
          add_subdirectory("${CMAKE_SOURCE_DIR}/../xerces-c/src" "${CMAKE_BINARY_DIR}/xerces")

          # >>> WICHTIG: generierte Header liegen im Build-Tree unter .../xerces/src
          # Globaler Include-Pfad, damit 'xercesc/util/Xerces_autoconf_config.hpp' gefunden wird.
          include_directories(BEFORE "${CMAKE_BINARY_DIR}/xerces/src")

          # Zusätzlich direkt am Target (falls Directory-Property überschrieben wird):
          if(TARGET xerces-c)
            target_include_directories(xerces-c PUBLIC "${CMAKE_BINARY_DIR}/xerces/src")
          endif()

          # Als letzte Sicherung: füge den Pfad auch als Compiler-Option hinzu
          add_compile_options(-I"${CMAKE_BINARY_DIR}/xerces/src")
          EOF

          # ===== Xerces bauen: Device =====
          cmake -S wrapper -B build_os -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=OS64 \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build_os --parallel

          # ===== Xerces bauen: Simulator =====
          cmake -S wrapper -B build_sim -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=SIMULATOR64 \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build_sim --parallel

          # ===== Xerces XCFramework =====
          xcodebuild -create-xcframework \
            -library build_os/xerces/libxerces-c.a -headers xerces-c/src \
            -library build_sim/xerces/libxerces-c.a -headers xerces-c/src \
            -output XercesC.xcframework

          # ===== libE57Format holen =====
          git clone https://github.com/asmaloney/libE57Format.git

          # ===== libE57Format bauen (Device) =====
          cmake -S libE57Format -B e57_os -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=OS64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DXercesC_INCLUDE_DIRS="$PWD/xerces-c/src" \
            -DXercesC_LIBRARY="$PWD/build_os/xerces/libxerces-c.a" \
            -DXercesC_LIBRARIES="$PWD/build_os/xerces/libxerces-c.a"
          cmake --build e57_os --parallel

          # ===== libE57Format bauen (Simulator) =====
          cmake -S libE57Format -B e57_sim -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN" \
            -DPLATFORM=SIMULATOR64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DXercesC_INCLUDE_DIRS="$PWD/xerces-c/src" \
            -DXercesC_LIBRARY="$PWD/build_sim/xerces/libxerces-c.a" \
            -DXercesC_LIBRARIES="$PWD/build_sim/xerces/libxerces-c.a"
          cmake --build e57_sim --parallel

          # tatsächliche lib-Namen ermitteln
          LIB_OS=$(ls e57_os/lib*.a | head -n1)
          LIB_SIM=$(ls e57_sim/li
